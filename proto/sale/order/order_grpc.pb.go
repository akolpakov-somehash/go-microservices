// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.1
// source: order.proto

package order

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	QuoteService_GetOrders_FullMethodName  = "/quote.QuoteService/GetOrders"
	QuoteService_GetOrder_FullMethodName   = "/quote.QuoteService/GetOrder"
	QuoteService_PlaceOrder_FullMethodName = "/quote.QuoteService/PlaceOrder"
)

// QuoteServiceClient is the client API for QuoteService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QuoteServiceClient interface {
	GetOrders(ctx context.Context, in *CustomerId, opts ...grpc.CallOption) (*OrderList, error)
	GetOrder(ctx context.Context, in *OrderId, opts ...grpc.CallOption) (*Order, error)
	PlaceOrder(ctx context.Context, in *CustomerId, opts ...grpc.CallOption) (QuoteService_PlaceOrderClient, error)
}

type quoteServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewQuoteServiceClient(cc grpc.ClientConnInterface) QuoteServiceClient {
	return &quoteServiceClient{cc}
}

func (c *quoteServiceClient) GetOrders(ctx context.Context, in *CustomerId, opts ...grpc.CallOption) (*OrderList, error) {
	out := new(OrderList)
	err := c.cc.Invoke(ctx, QuoteService_GetOrders_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quoteServiceClient) GetOrder(ctx context.Context, in *OrderId, opts ...grpc.CallOption) (*Order, error) {
	out := new(Order)
	err := c.cc.Invoke(ctx, QuoteService_GetOrder_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quoteServiceClient) PlaceOrder(ctx context.Context, in *CustomerId, opts ...grpc.CallOption) (QuoteService_PlaceOrderClient, error) {
	stream, err := c.cc.NewStream(ctx, &QuoteService_ServiceDesc.Streams[0], QuoteService_PlaceOrder_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &quoteServicePlaceOrderClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type QuoteService_PlaceOrderClient interface {
	Recv() (*ProcessStatus, error)
	grpc.ClientStream
}

type quoteServicePlaceOrderClient struct {
	grpc.ClientStream
}

func (x *quoteServicePlaceOrderClient) Recv() (*ProcessStatus, error) {
	m := new(ProcessStatus)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// QuoteServiceServer is the server API for QuoteService service.
// All implementations must embed UnimplementedQuoteServiceServer
// for forward compatibility
type QuoteServiceServer interface {
	GetOrders(context.Context, *CustomerId) (*OrderList, error)
	GetOrder(context.Context, *OrderId) (*Order, error)
	PlaceOrder(*CustomerId, QuoteService_PlaceOrderServer) error
	mustEmbedUnimplementedQuoteServiceServer()
}

// UnimplementedQuoteServiceServer must be embedded to have forward compatible implementations.
type UnimplementedQuoteServiceServer struct {
}

func (UnimplementedQuoteServiceServer) GetOrders(context.Context, *CustomerId) (*OrderList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrders not implemented")
}
func (UnimplementedQuoteServiceServer) GetOrder(context.Context, *OrderId) (*Order, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrder not implemented")
}
func (UnimplementedQuoteServiceServer) PlaceOrder(*CustomerId, QuoteService_PlaceOrderServer) error {
	return status.Errorf(codes.Unimplemented, "method PlaceOrder not implemented")
}
func (UnimplementedQuoteServiceServer) mustEmbedUnimplementedQuoteServiceServer() {}

// UnsafeQuoteServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QuoteServiceServer will
// result in compilation errors.
type UnsafeQuoteServiceServer interface {
	mustEmbedUnimplementedQuoteServiceServer()
}

func RegisterQuoteServiceServer(s grpc.ServiceRegistrar, srv QuoteServiceServer) {
	s.RegisterService(&QuoteService_ServiceDesc, srv)
}

func _QuoteService_GetOrders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CustomerId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuoteServiceServer).GetOrders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QuoteService_GetOrders_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuoteServiceServer).GetOrders(ctx, req.(*CustomerId))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuoteService_GetOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuoteServiceServer).GetOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QuoteService_GetOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuoteServiceServer).GetOrder(ctx, req.(*OrderId))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuoteService_PlaceOrder_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CustomerId)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(QuoteServiceServer).PlaceOrder(m, &quoteServicePlaceOrderServer{stream})
}

type QuoteService_PlaceOrderServer interface {
	Send(*ProcessStatus) error
	grpc.ServerStream
}

type quoteServicePlaceOrderServer struct {
	grpc.ServerStream
}

func (x *quoteServicePlaceOrderServer) Send(m *ProcessStatus) error {
	return x.ServerStream.SendMsg(m)
}

// QuoteService_ServiceDesc is the grpc.ServiceDesc for QuoteService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var QuoteService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "quote.QuoteService",
	HandlerType: (*QuoteServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetOrders",
			Handler:    _QuoteService_GetOrders_Handler,
		},
		{
			MethodName: "GetOrder",
			Handler:    _QuoteService_GetOrder_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PlaceOrder",
			Handler:       _QuoteService_PlaceOrder_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "order.proto",
}
